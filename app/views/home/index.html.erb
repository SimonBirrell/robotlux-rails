<div class="row grid">				
	<div class="col-md-12">
		<!-- panel -->
		<div class="panel panel-piluku">
			<div class="panel-heading">
				<h3 class="panel-title">
					Inside Your Robot
					<span class="panel-options">
						<a href="#" class="panel-refresh">
							<i class="icon ti-reload"></i>
						</a>
						<a href="#" class="panel-minimize">
							<i class="icon ti-angle-up"></i>
						</a>
						<a href="#" class="panel-close">
							<i class="icon ti-close"></i>
						</a>
					</span>
				</h3>
			</div>
			<div class="panel-body">
				<div id="robotlux">
				</div>	
				<script>
				var myData = {
					"nodes":[
					    {"name" : "/rosapi", "rtype": "node"},
					    {"name" : "/rostopic_14925_1432654283762", "rtype": "node"},
					    {"name" : "/robot_state_publisher", "rtype": "node"},
					    {"name" : "/rostopic_16206_1432656631485", "rtype": "node"},
					    {"name" : "/rosout", "rtype": "node"},
					    {"name" : "/base_footprint_broadcaster", "rtype": "node"},
					    {"name" : "/rqt_gui_py_node_18678", "rtype": "node"},
					    {"name" : "/add_two_ints_server", "rtype": "node"},
					    {"name" : "/arbotix", "rtype": "node"},
					    {"name" : "/rviz_1432654208787322574", "rtype": "node"},
					    {"name" : "/rosbridge_websocket", "rtype": "node"},
					    {"name" : "/rostopic_15963_1432656172190", "rtype": "node"},
					    {"name" : "/move_base_simple/goal", "rtype": "topic"},
					    {"name" : "/rosout", "rtype": "topic"},
					    {"name" : "/head_pan_joint/command", "rtype": "topic"},
					    {"name" : "/arm_elbow_flex_joint/command", "rtype": "topic"},
					    {"name" : "/joint_states", "rtype": "topic"},
					    {"name" : "/tf", "rtype": "topic"},
					    {"name" : "/gripper_joint/command", "rtype": "topic"},
					    {"name" : "/arm_wrist_flex_joint/command", "rtype": "topic"},
					    {"name" : "/odom", "rtype": "topic"},
					    {"name" : "/tf_static", "rtype": "topic"},
					    {"name" : "/initialpose", "rtype": "topic"},
					    {"name" : "/rosout_agg", "rtype": "topic"},
					    {"name" : "/diagnostics", "rtype": "topic"},
					    {"name" : "/listener", "rtype": "topic"},
					    {"name" : "/statistics", "rtype": "topic"},
					    {"name" : "/arm_shoulder_lift_joint/command", "rtype": "topic"},
					    {"name" : "/cmd_vel", "rtype": "topic"},
					    {"name" : "/arm_shoulder_pan_joint/command", "rtype": "topic"},
					    {"name" : "/head_tilt_joint/command", "rtype": "topic"}
					],
					"links":[
					    {"source" : "/joint_states", "target" : "/robot_state_publisher"},
					    {"source" : "/cmd_vel", "target" : "/arbotix"},
					    {"source" : "/cmd_vel", "target" : "/rostopic_15963_1432656172190"},
					    {"source" : "/arm_elbow_flex_joint/command", "target" : "/arbotix"},
					    {"source" : "/statistics", "target" : "/rqt_gui_py_node_18678"},
					    {"source" : "/rqt_gui_py_node_18678", "target" : "/rosout"},
					    {"source" : "/gripper_joint/command", "target" : "/arbotix"},
					    {"source" : "/rostopic_16206_1432656631485", "target" : "/listener"},
					    {"source" : "/head_pan_joint/command", "target" : "/arbotix"},
					    {"source" : "/rviz_1432654208787322574", "target" : "/move_base_simple/goal"},
					    {"source" : "/rviz_1432654208787322574", "target" : "/rosout"},
					    {"source" : "/rviz_1432654208787322574", "target" : "/initialpose"},
					    {"source" : "/rviz_1432654208787322574", "target" : "/cmd_vel"},
					    {"source" : "/base_footprint_broadcaster", "target" : "/rosout"},
					    {"source" : "/base_footprint_broadcaster", "target" : "/tf"},
					    {"source" : "/tf_static", "target" : "/rviz_1432654208787322574"},
					    {"source" : "/arm_wrist_flex_joint/command", "target" : "/arbotix"},
					    {"source" : "/arm_shoulder_lift_joint/command", "target" : "/arbotix"},
					    {"source" : "/arm_shoulder_pan_joint/command", "target" : "/arbotix"},
					    {"source" : "/arbotix", "target" : "/joint_states"},
					    {"source" : "/arbotix", "target" : "/rosout"},
					    {"source" : "/arbotix", "target" : "/tf"},
					    {"source" : "/arbotix", "target" : "/odom"},
					    {"source" : "/arbotix", "target" : "/diagnostics"},
					    {"source" : "/head_tilt_joint/command", "target" : "/arbotix"},
					    {"source" : "/rosout", "target" : "/rosout_agg"},
					    {"source" : "/rostopic_15963_1432656172190", "target" : "/rosout"},
					    {"source" : "/odom", "target" : "/rviz_1432654208787322574"},
					    {"source" : "/rosapi", "target" : "/rosout"},
					    {"source" : "/rosbridge_websocket", "target" : "/rosout"},
					    {"source" : "/add_two_ints_server", "target" : "/rosout"},
					    {"source" : "/rosout", "target" : "/rosout"},
					    {"source" : "/tf", "target" : "/rviz_1432654208787322574"},
					    {"source" : "/rostopic_14925_1432654283762", "target" : "/cmd_vel"},
					    {"source" : "/robot_state_publisher", "target" : "/rosout"},
					    {"source" : "/robot_state_publisher", "target" : "/tf"}
					],
					"groups":[
						{"leaves": [0, 1, 2, 3]},
						{"leaves": [4, 5, 6]}
					]
				}
				
					var findNode = function(name) {
						var obj = myData.nodes.filter(function ( node ) {
						    return node.name === name;
						})[0];
						
						return obj;
					}
					
					var colourNode = function(node) {
						var colorKeys = ['unknown', 'node', 'topic'];
						var colorValues = [1, 2, 3];
						
						var color = colorKeys.indexOf(node.rtype) || 0;
						
						return colorValues[color];
					}
				
					var topLabel = function(name) {
						var tokens = name.split("/");
						return tokens[1];
					}
				
					var bottomLabel = function(name) {
						var tokens = name.split("/");
						if (tokens.length > 1)
							return tokens[2];
						return "";	
					}
				
					// Basic parameters
					var width = 1500,
					    height = 1000;					
					var circleRadius = 32;
					var groupPadding = circleRadius / 2;
					var colorText = "#042029";
					var color = d3.scale.category20();
					var useCola = true;
					
					// Set up nodes
					for (i=0; i<myData.nodes.length; i++) {
						myData.nodes[i]['group'] = 1;
						myData.nodes[i]['width'] = circleRadius*2;
						myData.nodes[i]['height'] = circleRadius*2;
					}
					
					// Set up groups
					myData.groups.forEach(function (g) { g.padding = circleRadius; });
					
					// Add value to links
					for (i=0; i<myData.links.length; i++) {
						myData.links[i]['source'] = findNode(myData.links[i]['source']);
						myData.links[i]['target'] = findNode(myData.links[i]['target']);
						myData.links[i]['value'] = 15;
					}
					
					if (useCola) {
						var force = cola.d3adaptor()
						    .linkDistance(circleRadius * 5)
						    .avoidOverlaps(true)
						    .handleDisconnected(false)
						    .size([width, height]);
					}
					else {
						var force = d3.layout.force()
						    .charge(-5000)
						    .linkDistance(circleRadius * 5)
							.linkStrength(0.75)
						    .size([width, height]);						
					}
					
					var dragColaSetup = force.drag()
						.origin(function(d) { return d; })
					    .on("dragstart", dragstarted)
					    .on("drag", draggedCola)
					    .on("dragend", dragended)
						;

					var margin = {top: 20, right: 20, bottom: 20, left: 90},
					    width = width - margin.right - margin.left,
					    height = height - margin.top - margin.bottom;

					var zoom = d3.behavior.zoom()
//					    .scaleExtent([1, 10])
					    .on("zoom", zoomAndPan);

					var svg = d3.select("#robotlux").append("svg")
					    .attr("width", width + margin.right + margin.left)
					    .attr("height", height + margin.top + margin.bottom)
						.call(zoom)
						.append("g")
					    .attr("transform", "translate(" + margin.left + "," + margin.right + ")")
					;
					
					var rect = svg.append("rect")
					    .attr("width", width)
					    .attr("height", height)
					    .style("fill", "none")
					    .style("pointer-events", "all");
					

					var zoomed = function () {
					  svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
					}
					
					// Per-type markers, as they don't inherit styles.
					svg.append("svg:defs").selectAll("marker")
					    .data(["basic", "licensing", "resolved"])
					  .enter().append("svg:marker")
					    .attr("id", String)
					    .attr("viewBox", "0 -5 10 10")
					    .attr("refX", circleRadius+4)
					    .attr("refY", 0)
					    .attr("markerWidth", 3)
					    .attr("markerHeight", 3)
					    .attr("orient", "auto")
					  .append("svg:path")
					    .attr("d", "M0,-5L10,0L0,5");

					if (useCola) {
						force.nodes(myData.nodes)
						      .links(myData.links)
							  .groups(myData.groups)
						      .symmetricDiffLinkLengths(circleRadius * 7)
						      .start(10,15,20);	
						dragFunction = dragColaSetup;											
					}
					else {
						force.nodes(myData.nodes)
						      .links(myData.links)
						      .start();			
						dragFunction = drag;			
					}					

					var group = svg.selectAll(".group")
			            .data(myData.groups)
			          .enter().append("rect")
			            .attr("rx", 8).attr("ry", 8)
			            .attr("class", "group")
						;

				    var link = svg.selectAll(".link")
				        .data(myData.links)
				      .enter().append("line")
				        .attr("class", "link")
				        .attr("x1", function(d) { return d.source.x; })
				        .attr("y1", function(d) { return d.source.y; })
				        .attr("x2", function(d) { return d.target.x; })
				        .attr("y2", function(d) { return d.target.y; })
					    .attr("marker-end", function(d) { return "url(#" + "basic" + ")"; })
						.style("stroke-width", function(d) { return Math.sqrt(d.value); });

					var node = svg.selectAll(".node")
				        .data(myData.nodes)
				      .enter().append("g")
				        .attr("class", "node")
				        .attr("width", function(d) {return circleRadius * 2;})
				        .attr("height", function(d) {return circleRadius * 2;})
						.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"})
				        .call(dragFunction);
				
					node.append("circle")
				        .attr("r", circleRadius)
				        .attr("class", function(d) { return "node-" + d.rtype; });
					
					node.append("title")
					  .text(function(d) { return d.name; });
						
					node.append("text")
					  .text(function(d) { return topLabel(d.name); })
						.attr("class", function(d) {return "node-label" })
				      	.attr("x", function(d, i) { return -circleRadius ; })
				      	.attr("y", function(d, i) { return 1.3 * circleRadius;  })
				      	.attr("font-size", function(d, i) {  return  "1em"; })
				      	.attr("text-anchor", function(d, i) { if (i>0) { return  "beginning"; } else { return "end" } });

					node.append("text")
					  .text(function(d) { return bottomLabel(d.name); })
						.attr("class", function(d) {return "node-label" })
				      	.attr("x", function(d, i) { return -circleRadius ; })
				      	.attr("y", function(d, i) { return 1.7 * circleRadius;  })
				      	.attr("font-size", function(d, i) {  return  "1em"; })
				      	.attr("text-anchor", function(d, i) { if (i>0) { return  "beginning"; } else { return "end" } });


					force.on("tick", function() {
						link.attr("x1", function(d) { return d.source.x; })
						    .attr("y1", function(d) { return d.source.y; })
						    .attr("x2", function(d) { return d.target.x; })
						    .attr("y2", function(d) { return d.target.y; });

						node
							.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"});
						
						group.attr("x", function (d) { return d.bounds.x; })
			                 .attr("y", function (d) { return d.bounds.y; })
			                 .attr("width", function (d) { return d.bounds.width(); })
			                 .attr("height", function (d) { return d.bounds.height(); });
						
					});	
					
					function zoomAndPan() {
					  svg.attr("transform", "translate(" + (d3.event.translate[0] + margin.left) + "," + (d3.event.translate[1] + margin.top) + ")");
					}	
					
					function dragstarted(d) {
					  if (useCola) {
						d3.event.sourceEvent.stopPropagation();
						d.fixed |= 2; // set bit 2
			            d.px = d.x, d.py = d.y; // set velocity to zero			            
					  }
					  else {
						d3.event.sourceEvent.stopPropagation();
						d3.select(this).classed("dragging", true);
					  }
					}

					function draggedCola(d) {
				      d.px = d3.event.x, d.py = d3.event.y;               
					  d3.select(this).attr("transform", function(d) { return "translate(" + d3.event.x + "," + d3.event.y + ")"});
					  force.resume();
					}

					function dragended(d) {
					  d3.select(this).classed("dragging", false);
					}
					
					
				</script>
			</div>
		</div>
		<!-- /panel -->
	</div>
	<!-- /col-md-12 -->
</div>
<!-- /row -->

			

